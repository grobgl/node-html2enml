// Generated by CoffeeScript 1.10.0
var DOMParser, Evernote, NOTEHEADER, PROHIBITEDATTR, PROHIBITEDTAGS, SparkMD5, XMLHttpRequest, XMLSerializer, async, base1, fs, htmlEnmlConverter, mime, ref,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

async = require('async');

mime = require('mime');

XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;

SparkMD5 = require('spark-md5');

ref = require('xmldom'), DOMParser = ref.DOMParser, XMLSerializer = ref.XMLSerializer;

Evernote = require('evernote').Evernote;

if ((base1 = String.prototype).startsWith == null) {
  base1.startsWith = function(s) {
    return this.slice(0, s.length) === s;
  };
}

NOTEHEADER = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">';

PROHIBITEDTAGS = ["applet", "base", "basefont", "bgsound", "blink", "button", "dir", "embed", "fieldset", "form", "frame", "frameset", "head", "iframe", "ilayer", "input", "isindex", "label", "layer", "legend", "link", "marquee", "menu", "meta", "noframes", "noscript", "object", "optgroup", "option", "param", "plaintext", "script", "select", "style", "textarea", "xml"];

PROHIBITEDATTR = ["id", "class", "onclick", "ondblclick", "accesskey", "data", "dynsrc", "tabindex"];

htmlEnmlConverter = (function() {
  function htmlEnmlConverter() {
    this.resources = [];
    this.parser = new DOMParser;
    this.serializer = new XMLSerializer;
  }

  htmlEnmlConverter.prototype.convert = function(htmlString, baseUrl, callback) {
    var doc;
    doc = this.parser.parseFromString(htmlString, 'text/html');
    return this._convertNodes(doc, baseUrl, (function(_this) {
      return function(err) {
        var enml, errors, resources, testdoc;
        doc = doc.getElementsByTagName('body')[0];
        doc.tagName = 'en-note';
        enml = NOTEHEADER + _this.serializer.serializeToString(doc);
        testdoc = _this.parser.parseFromString(enml);
        errors = testdoc.getElementsByTagName('parsererror');
        resources = _this.resources.map(function(e) {
          return e.resource;
        });
        if (errors.length) {
          return callback(new Error('Failed to parse'));
        } else {
          return callback(null, enml, resources);
        }
      };
    })(this));
  };

  htmlEnmlConverter.prototype._convertMedia = function(element, url, callback) {
    var _this, resource, xhr;
    resource = this.resources.find(function(resource) {
      return resource.url === url;
    });
    if (resource) {
      element.tagName = 'en-media';
      element.setAttribute('hash', resource.hash);
      element.setAttribute('type', resource.mime);
      element.removeAttribute('src');
      return callback();
    }
    xhr = new XMLHttpRequest;
    xhr.element = element;
    xhr.responseType = 'arraybuffer';
    _this = this;
    xhr.onreadystatechange = function() {
      var hash, mimeType, spark;
      if (this.readyState === 4) {
        if (this.status === 200) {
          spark = new SparkMD5.ArrayBuffer;
          spark.append(this.responseText);
          hash = spark.end();
          mimeType = this.getResponseHeader('content-type') || mime.lookup(url);
          resource = new Evernote.Resource({
            mime: mimeType
          });
          resource.data = new Evernote.Data;
          resource.data.body = this.responseText;
          resource.data.bodyHash = hash;
          this.element.tagName = 'en-media';
          this.element.setAttribute('hash', hash);
          this.element.setAttribute('type', mimeType);
          this.element.removeAttribute('src');
          _this.resources.push({
            url: url,
            hash: hash,
            mime: mimeType,
            resource: resource
          });
          return callback();
        } else {
          return callback();
        }
      }
    };
    xhr.open('GET', url);
    return xhr.send();
  };

  htmlEnmlConverter.prototype._adjustUrl = function(relative, base) {
    var i, len, part, parts, stack;
    if (relative.startsWith('http:') || relative.startsWith('https:') || relative.startsWith('file:') || relative.startsWith('evernote:')) {
      return relative;
    }
    stack = base.split('/');
    parts = relative.split('/');
    stack.pop();
    for (i = 0, len = parts.length; i < len; i++) {
      part = parts[i];
      if (part === '.') {
        continue;
      }
      if (part === '..') {
        stack.pop();
      } else {
        stack.push(part);
      }
    }
    return stack.join('/');
  };

  htmlEnmlConverter.prototype._convertNodes = function(domNode, baseUrl, callback) {
    var tagName;
    tagName = domNode.tagName ? domNode.tagName.toLowerCase() : '';
    if (indexOf.call(PROHIBITEDTAGS, tagName) >= 0) {
      domNode.parentNode.removeChild(domNode);
      return callback();
    } else if (domNode.attributes || domNode.childNodes) {
      return async.parallel([
        (function(_this) {
          return function(callback) {
            if (!domNode.attributes) {
              return callback();
            }
            return async.each(domNode.attributes, function(attribute, callback) {
              var attributeName;
              attributeName = attribute.name.toLowerCase();
              if (indexOf.call(PROHIBITEDATTR, attributeName) >= 0) {
                domNode.attributes.removeNamedItem(attribute.name);
                return callback();
              } else if (attributeName === 'href' && tagName === 'a') {
                attribute.value = _this._adjustUrl(attribute.value, baseUrl);
                if (!attribute.value) {
                  domNode.attributes.removeNamedItem(attribute.name);
                }
                return callback();
              } else if (attributeName === 'src' && tagName === 'img') {
                attribute.value = _this._adjustUrl(attribute.value, baseUrl);
                if (!attribute.value) {
                  domNode.parentNode.removeChild(domNode);
                  return callback();
                } else {
                  return _this._convertMedia(domNode, attribute.value, callback);
                }
              } else {
                return callback();
              }
            }, callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            if (!domNode.childNodes) {
              return callback();
            }
            return async.each(domNode.childNodes, function(childNode, callback) {
              return _this._convertNodes(childNode, baseUrl, callback);
            }, callback);
          };
        })(this)
      ], callback);
    } else {
      return callback();
    }
  };

  return htmlEnmlConverter;

})();

module.exports.fromString = function(htmlString, baseUrl, callback) {
  return new htmlEnmlConverter().convert(htmlString, baseUrl, callback);
};

module.exports.fromFile = function(file, baseUrl, callback) {
  return fs.readFile(file, 'utf8', function(err, htmlString) {
    if (err) {
      callback(err);
    }
    return new htmlEnmlConverter().convert(htmlString, baseUrl, callback);
  });
};
