// Generated by CoffeeScript 1.10.0
var ATTRIBUTE_NODE, CDATA_SECTION_NODE, COMMENT_NODE, DOCUMENT_FRAGMENT_NODE, DOCUMENT_NODE, DOCUMENT_TYPE_NODE, DOMParser, ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE, Evernote, NOTATION_NODE, NOTE_HEADER, NodeType, PERMITTED_ELEMENTS, PERMITTED_URLS, PROCESSING_INSTRUCTION_NODE, PROHIBITED_ATTR, SparkMD5, TEXT_NODE, XMLHttpRequest, XMLSerializer, async, base, base1, fs, htmlEnmlConverter, mime, ref,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

async = require('async');

mime = require('mime');

mime.default_type = '';

XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;

SparkMD5 = require('spark-md5');

ref = require('xmldom'), DOMParser = ref.DOMParser, NodeType = ref.NodeType, XMLSerializer = ref.XMLSerializer;

Evernote = require('evernote').Evernote;

if ((base = String.prototype).startsWith == null) {
  base.startsWith = function(s) {
    return this.slice(0, s.length) === s;
  };
}

if ((base1 = String.prototype).startsWithAny == null) {
  base1.startsWithAny = function(s) {
    var i, len, x;
    for (i = 0, len = s.length; i < len; i++) {
      x = s[i];
      if (this.startsWith(x)) {
        return true;
      }
    }
    return false;
  };
}

NOTE_HEADER = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">';

PERMITTED_ELEMENTS = ['a', 'abbr', 'acronym', 'address', 'area', 'b', 'bdo', 'big', 'blockquote', 'br', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'dd', 'del', 'dfn', 'div', 'dl', 'dt', 'em', 'font', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'map', 'ol', 'p', 'pre', 'q', 's', 'samp', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'tt', 'u', 'ul', 'var', 'xmp'];

PROHIBITED_ATTR = ['id', 'class', 'onclick', 'ondblclick', 'on', 'accesskey', 'data', 'dynsrc', 'tabindex'];

NodeType = {};

ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;

ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;

TEXT_NODE = NodeType.TEXT_NODE = 3;

CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;

ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;

ENTITY_NODE = NodeType.ENTITY_NODE = 6;

PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;

COMMENT_NODE = NodeType.COMMENT_NODE = 8;

DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;

DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;

DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;

NOTATION_NODE = NodeType.NOTATION_NODE = 12;

PERMITTED_URLS = ['http', 'https', 'file', 'evernote'];

htmlEnmlConverter = (function() {
  function htmlEnmlConverter(options) {
    this.baseUrl = options.baseUrl || '';
    this.strict = options.strict || false;
    this.includeComments = options.includeComments || false;
    this.ignoreFiles = options.ignoreFiles || false;
    this.resources = [];
    this.parser = new DOMParser;
    this.serializer = new XMLSerializer;
  }

  htmlEnmlConverter.prototype.convert = function(htmlString, callback) {
    var doc;
    doc = this.parser.parseFromString(htmlString, 'text/html');
    doc = doc.getElementsByTagName('body')[0];
    return this._convertBody(doc, (function(_this) {
      return function(err) {
        var enml, resources;
        if (err) {
          return callback(err);
        }
        enml = NOTE_HEADER + _this.serializer.serializeToString(doc);
        resources = _this.resources.map(function(e) {
          return e.resource;
        });
        return callback(null, enml, resources);
      };
    })(this));
  };

  htmlEnmlConverter.prototype._convertBody = function(domNode, callback) {
    domNode.tagName = 'en-note';
    return async.series([
      (function(_this) {
        return function(callback) {
          return async.each(domNode.attributes, function(attribute, callback) {
            var attributeName;
            attributeName = attribute.name.toLowerCase();
            if (indexOf.call(PROHIBITED_ATTR, attributeName) >= 0) {
              domNode.attributes.removeNamedItem(attribute.name);
              return callback();
            }
          }, callback);
        };
      })(this), (function(_this) {
        return function(callback) {
          return async.each(domNode.childNodes, function(childNode, callback) {
            return _this._convertNode(childNode, callback);
          }, callback);
        };
      })(this)
    ], callback);
  };

  htmlEnmlConverter.prototype._convertNode = function(domNode, callback) {
    switch (domNode.nodeType) {
      case ELEMENT_NODE:
        return this._convertElementNode(domNode, callback);
      case TEXT_NODE:
        return callback();
      case COMMENT_NODE:
        if (!this.includeComments) {
          domNode.parentNode.removeChild(domNode);
        }
        return callback();
      default:
        domNode.parentNode.removeChild(domNode);
        return callback();
    }
  };

  htmlEnmlConverter.prototype._convertElementNode = function(domNode, callback) {
    var err, tagName;
    tagName = domNode.tagName ? domNode.tagName.toLowerCase() : '';
    if (indexOf.call(PERMITTED_ELEMENTS, tagName) < 0) {
      domNode.parentNode.removeChild(domNode);
      err = this.strict ? new Error("Illegal element (" + tagName + ")") : null;
      return callback(err);
    }
    return async.parallel([
      (function(_this) {
        return function(callback) {
          return async.each(domNode.attributes, function(attribute, callback) {
            var attributeName;
            attributeName = attribute.name.toLowerCase();
            if (indexOf.call(PROHIBITED_ATTR, attributeName) >= 0) {
              domNode.attributes.removeNamedItem(attribute.name);
              return callback();
            } else if (attributeName === 'href' && tagName === 'a') {
              attribute.value = _this._adjustUrl(attribute.value);
              if (!attribute.value) {
                domNode.attributes.removeNamedItem(attribute.name);
              }
              return callback();
            } else if (attributeName === 'src' && tagName === 'img') {
              if (_this.ignoreFiles) {
                domNode.parentNode.removeChild(domNode);
                return callback();
              }
              attribute.value = _this._adjustUrl(attribute.value);
              if (!attribute.value) {
                domNode.parentNode.removeChild(domNode);
                return callback();
              } else {
                return _this._convertMedia(domNode, attribute.value, callback);
              }
            } else {
              return callback();
            }
          }, callback);
        };
      })(this), (function(_this) {
        return function(callback) {
          return async.each(domNode.childNodes, function(childNode, callback) {
            return _this._convertNode(childNode, callback);
          }, callback);
        };
      })(this)
    ], callback);
  };

  htmlEnmlConverter.prototype._convertMedia = function(element, url, callback) {
    var _this, resource, xhr;
    resource = this.resources.find(function(resource) {
      return resource.url === url;
    });
    if (resource) {
      element.tagName = 'en-media';
      element.setAttribute('hash', resource.hash);
      element.setAttribute('type', resource.mime);
      element.removeAttribute('src');
      return callback();
    }
    xhr = new XMLHttpRequest;
    xhr.element = element;
    xhr.responseType = 'arraybuffer';
    _this = this;
    xhr.onreadystatechange = function() {
      var hash, mimeType, spark;
      if (this.readyState === 4) {
        if (this.status === 200) {
          mimeType = this.getResponseHeader('content-type') || mime.lookup(url);
          if (!mimeType) {
            if (_this.strict) {
              return callback(new Error("Mime type of resource " + url + " could not be identified"));
            } else {
              element.parentNode.removeChild(element);
              return callback();
            }
          }
          spark = new SparkMD5.ArrayBuffer;
          spark.append(this.responseText);
          hash = spark.end();
          resource = new Evernote.Resource({
            mime: mimeType
          });
          resource.data = new Evernote.Data;
          resource.data.body = this.responseText;
          resource.data.bodyHash = hash;
          this.element.tagName = 'en-media';
          this.element.setAttribute('hash', hash);
          this.element.setAttribute('type', mimeType);
          this.element.removeAttribute('src');
          _this.resources.push({
            url: url,
            hash: hash,
            mime: mimeType,
            resource: resource
          });
          return callback();
        } else {
          if (_this.strict) {
            return callback(new Error("Resource " + url + " not found (" + this.status + ")"));
          } else {
            element.parentNode.removeChild(element);
            return callback();
          }
        }
      }
    };
    xhr.open('GET', url);
    return xhr.send();
  };

  htmlEnmlConverter.prototype._adjustUrl = function(relative) {
    var i, len, part, parts, stack;
    if (relative.startsWithAny(PERMITTED_URLS)) {
      return relative;
    }
    stack = this.baseUrl.split('/');
    parts = relative.split('/');
    stack.pop();
    for (i = 0, len = parts.length; i < len; i++) {
      part = parts[i];
      if (part === '.') {
        continue;
      }
      if (part === '..') {
        stack.pop();
      } else {
        stack.push(part);
      }
    }
    return stack.join('/');
  };

  return htmlEnmlConverter;

})();

module.exports.fromString = function(htmlString, options, callback) {
  return new htmlEnmlConverter(options).convert(htmlString, callback);
};

module.exports.fromFile = function(file, options, callback) {
  return fs.readFile(file, 'utf8', function(err, htmlString) {
    if (err) {
      callback(err);
    }
    return new htmlEnmlConverter(options).convert(htmlString, callback);
  });
};
