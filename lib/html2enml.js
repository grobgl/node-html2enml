// Generated by CoffeeScript 1.10.0
(function() {
  var DOMParser, Evernote, SparkMD5, XMLHttpRequest, XMLSerializer, _adjustUrl, _convertMedia, _convertNodes, _toArrayBuffer, async, base1, enmlProhibitedAttributes, enmlProhibitedTags, fs, htmlToEnml, parser, ref, requests, resources, serializer,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('xmldom'), DOMParser = ref.DOMParser, XMLSerializer = ref.XMLSerializer;

  XMLHttpRequest = require('xhr2');

  async = require('async');

  Evernote = require('evernote').Evernote;

  SparkMD5 = require('spark-md5');

  fs = require('fs');

  parser = new DOMParser;

  serializer = new XMLSerializer;

  if ((base1 = String.prototype).startsWith == null) {
    base1.startsWith = function(s) {
      return this.slice(0, s.length) === s;
    };
  }

  enmlProhibitedTags = ["applet", "base", "basefont", "bgsound", "blink", "button", "dir", "embed", "fieldset", "form", "frame", "frameset", "head", "iframe", "ilayer", "input", "isindex", "label", "layer", "legend", "link", "marquee", "menu", "meta", "noframes", "noscript", "object", "optgroup", "option", "param", "plaintext", "script", "select", "style", "textarea", "xml"];

  enmlProhibitedAttributes = ["id", "class", "onclick", "ondblclick", "accesskey", "data", "dynsrc", "tabindex"];

  requests = [];

  resources = [];

  _toArrayBuffer = function(buffer) {
    var ab, i, j, len, unit, view;
    ab = new ArrayBuffer(buffer.length);
    view = new Uint8Array(ab);
    for (i = j = 0, len = buffer.length; j < len; i = ++j) {
      unit = buffer[i];
      view[i] = unit;
    }
    return ab;
  };

  _convertMedia = function(element, url, callback) {
    var request;
    request = new XMLHttpRequest;
    request.element = element;
    request.open('GET', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function(e) {
      var hash, i, j, len, mime, resource, response, spark, str;
      response = e.target;
      if (response.status === 200) {
        spark = new SparkMD5.ArrayBuffer;
        spark.append(response.response);
        hash = spark.end;
        mime = response.getResponseHeader('content-type');
        response.element.tagName = 'en-media';
        response.element.setAttribute('hash', hash);
        response.element.setAttribute('type', mime);
        str = serializer.serializeToString(response.element);
        response.element.removeAttribute('src');
        resource = new Evernote.Resource({
          mime: mime
        });
        resource.data = new Evernote.Data;
        resource.data.body = response.response;
        resource.data.bodyHash = hash;
        resources.push(resource);
      }
      for (i = j = 0, len = requests.length; j < len; i = ++j) {
        request = requests[i];
        if (request === response) {
          requests.splice(i, 1);
        }
      }
      if (requests.length === 0) {
        return callback();
      }
    };
    if (url.indexOf('http' === -1)) {
      return request.onload({
        target: {
          status: 200,
          response: toArrayBuffer(fs.readFileSync(url)),
          element: element,
          getResponseHeader: function() {
            return 'image/png';
          }
        }
      });
    } else {
      requests.push(request);
      return request.send(null);
    }
  };

  _adjustUrl = function(relative, base) {
    var j, len, part, parts, stack;
    if (relative.startsWith('http:' || relative.startsWith('https:' || relative.startsWith('file:' || relative.startsWith('evernote:'))))) {
      return relative;
    }
    stack = base.split('/');
    parts = relative.split('/');
    stack.pop();
    for (j = 0, len = parts.length; j < len; j++) {
      part = parts[j];
      if (part === '.') {
        continue;
      }
      if (part === '..') {
        stack.pop();
      } else {
        stack.push(part);
      }
    }
    return stack.join('/');
  };

  _convertNodes = function(domNode, baseUrl, callback) {
    var tagName;
    tagName = domNode.tagName ? domNode.tagName.toLowerCase() : '';
    if (tagName && indexOf.call(enmlProhibitedTags, tagName) >= 0) {
      domNode.parentNode.removeChild(domNode);
      return callback();
    } else if (domNode.attributes || domNode.childNodes) {
      return async.parallel([
        function(callback) {
          if (!domNode.attributes) {
            return callback();
          }
          return async.each(domNode.attributes, function(attribute, callback) {
            var attributeName;
            attributeName = attribute.name.toLowerCase();
            if (indexOf.call(enmlProhibitedAttributes, attributeName) >= 0) {
              domNode.attributes.removeNamedItem(attribute.name);
              return callback();
            } else if (attributeName === 'href' && tagName && tagName === 'a') {
              attribute.value = _adjustUrl(attribute.value, baseUrl);
              if (!attribute.value) {
                domNode.attributes.removeNamedItem(attribute.name);
              }
              return callback();
            } else if (attributeName === 'src' && tagName && tagName === 'image') {
              attribute.value = _adjustUrl(attribute.value, baseUrl);
              if (!attribute.value) {
                domNode.parentNode.removeChild(domNode);
                return callback();
              } else {
                return _convertMedia(domNode, attribute.value, callback);
              }
            } else {
              return callback();
            }
          }, callback);
        }, function(callback) {
          if (!domNode.childNodes) {
            return callback();
          }
          return async.each(domNode.childNodes, function(childNode, callback) {
            return _convertNodes(childNode, baseUrl, callback);
          }, callback);
        }
      ], callback);
    } else {
      return callback();
    }
  };

  module.exports = htmlToEnml = function(htmlString, baseUrl, callback) {
    var doc;
    doc = parser.parseFromString(htmlString, 'text/html');
    return _convertNodes(doc, baseUrl, function(err) {
      var dtd, enml, errors, str, testdoc;
      doc = doc.getElementsByTagName('body')[0];
      doc.tagName = 'en-note';
      str = serializer.serializeToString(doc);
      dtd = '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">\n';
      enml = dtd + str;
      testdoc = parser.parseFromString(enml);
      errors = testdoc.getElementsByTagName('parsererror');
      if (errors.length) {
        return callback(new Error('Failed to parse'));
      } else {
        return callback(null, enml, resources);
      }
    });
  };

}).call(this);
